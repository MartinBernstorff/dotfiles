;; !  | means mandatory
;; #  | means optional
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any

;; examples

;; !CTSequal_sign  | mandatory command control shift =
;;                 | which is command control +
;; !O#Sright_arrow | mandatory option optional any right_arrow

;; karabiner definition of mandatory and optional
;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

;; rule [<from> <to>]
;; if simplified modifier is used in <to>, optional(#) definition will be
;; ignored.

;; FROM modifiers
;; to understand better how modifiers work in karabiner
;; karabiner definition of mandatory and optional
;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/
;;    | no modifier
;;                  input key maps to output key exactly
;;                  adding any modifier will cancel the event

;; !  | mandatory
;;                  specified modifier is removed in output (to event)
;;                  specified modifiers must be present for event to occur
;;                  adding any other modifier will cancel the event

;; #  | optional (single)
;;                  specified modifier is kept in output (to event)
;;                  one (or none) of the specified modifiers must be present
;;                  adding any other modifier will cancel the event


;;                  specified modifier is removed in output (to event)
;;                  specified modifiers *must* be present for event to occur
;;                  adding any other modifier will add to output event
;;                  (what you typically expect, additional modifiers tacked on)
;;
;; need to prefix C T O S F with ! or #
;;
{:default true
  :devices {:vortex [{:vendor_id 1241 :product_id 402}]} 
 :simlayers {
            :app_mode {:key :a}
            :symbol_mode {:key :s}
            :delimeter_mode {:key :d} 
            :fire_mode {:key :f}
            :number_mode {:key :x}
             }
:simlayer-threshold 100 :main [
         {:des "app_mode" :rules [:app_mode 
                                    [:e :!TSe]
                                    [:f :!TSs]
                                    [:d :!TSd]
                                    [:t :!TSt]
                                    [:h :!TSh]
                                    ]}
         {:des "symbol" :rules [:symbol_mode 
                                    ;; left hand
                                    [:e :!Shyphen] ;; ?, examination
                                    [:t :!S3] ;; #, tag
                                    [:r [:!Oclose_bracket :spacebar]];; ~, residence
                                    [:d :!S5];; %, division
                                    [:a :!S6];; &, and
                                    [:f :!Sslash];; _, feature
                                    [:g :!Sbackslash];; *, globe

                                    ;; right hand
                                    [:y :grave_accent_and_tilde] ;; ^, unbelieveable hat
                                    [:u [:!Sclose_bracket :spacebar]] ;; ^, unbelieveable hat
                                    [:i :non_us_backslash] ;; $, income
                                    [:o :!S1] ;; !, objection
                                    [:p :hyphen] ;; +, plus
                                    [:h :!Sgrave_accent_and_tilde] ;; >, less_than
                                    [:j :!S0] ;; =, joined
                                    [:k :!S9] ;; )
                                    [:l :!S2] ;; "
                                    [:n :slash] ;; -, negation
                                    [:m :!SO8] ;; {
                                    [:comma :!SO9] ;; }
                                    ]}
         {:des "delimeters" :rules [:delimeter_mode 
                                    ;; left hand
                                    [:r :!S2];; ", reference
                                    [:f :!S7];; /, forward slash
                                    [:b :!SO7];; \, backslash
                                    
                                    ;; right hand
                                    [:u :!O8] ;; [
                                    [:i :!O9] ;; ]
                                    [:o [:!Sequal_sign :spacebar]] ;; `
                                    [:j :!S8] ;; (
                                    [:k :!S9] ;; )
                                    [:l :!Speriod] ;; :, liminal
                                    [:m :!SO8] ;; {
                                    [:comma :!SO9] ;; }
                                    [:period :backslash] ;; '
                                    ]}
         {:des "fire_mode" :rules [:fire_mode 
                                    [:##e :escape]
                                    [:##h :left_arrow]
                                    [:##j :down_arrow]
                                    [:##k :up_arrow]
                                    [:##l :right_arrow]
                                    [:##o :delete_or_backspace]
                                    [:##i :tab]
                                    [:##spacebar :return_or_enter]
                                    ]}
         {:des "shift" :rules [[:grave_accent_and_tilde :left_shift]]}
         {:des "number mode" :rules [:number_mode
                                     [:u :7]
                                     [:i :8]
                                     [:o :9]
                                     [:j :4]
                                     [:k :5]
                                     [:l :6]
                                     [:n :0]
                                     [:m :1]
                                     [:comma :2]
                                     [:period :3]
                                     ]}
         ]}